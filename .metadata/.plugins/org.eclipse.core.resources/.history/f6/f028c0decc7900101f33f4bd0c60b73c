package com.example.crm.service;

import com.example.crm.dao.CustomerRepository;
import com.example.crm.entities.Customer;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class CustomerServiceTest {

    @Mock
    private CustomerRepository customerRepository;

    @InjectMocks
    private CustomerService customerService;

    private Customer customer1;
    private Customer customer2;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);

        customer1 = new Customer(1L, "Shraddha Prabhu", "shraddha@example.com",
                "9876543210", "Pune, India", LocalDate.now());
        customer2 = new Customer(2L, "Swizal Janice", "swizal@example.com",
                "9876500000", "Mumbai, India", LocalDate.now());
    }

    @Test
    void testAddCustomer() {
        when(customerRepository.save(customer1)).thenReturn(customer1);

        Customer saved = customerService.addCustomer(customer1);

        assertNotNull(saved);
        assertEquals("Shraddha Prabhu", saved.getName());
        verify(customerRepository, times(1)).save(customer1);
    }

    @Test
    void testGetAllCustomers() {
        when(customerRepository.findAll()).thenReturn(Arrays.asList(customer1, customer2));

        List<Customer> customers = customerService.getAllCustomers();

        assertEquals(2, customers.size());
        assertEquals("Swizal Janice", customers.get(1).getName());
        verify(customerRepository, times(1)).findAll();
    }

    @Test
    void testGetCustomerById_Found() {
        when(customerRepository.findById(1L)).thenReturn(Optional.of(customer1));

        Customer found = customerService.getCustomerById(1L);

        assertNotNull(found);
        assertEquals("Shraddha Prabhu", found.getName());
    }

    @Test
    void testGetCustomerById_NotFound() {
        when(customerRepository.findById(99L)).thenReturn(Optional.empty());

        Customer found = customerService.getCustomerById(99L);

        assertNull(found);
    }

    @Test
    void testUpdateCustomer_Found() {
        Customer updatedInfo = new Customer(null, "Sharika KR", "sharika@example.com",
                "9999999999", "Bangalore, India", LocalDate.now());

        when(customerRepository.findById(1L)).thenReturn(Optional.of(customer1));
        when(customerRepository.save(any(Customer.class))).thenReturn(updatedInfo);

        Customer updated = customerService.updateCustomer(1L, updatedInfo);

        assertNotNull(updated);
        assertEquals("Sharika KR", updated.getName());
        verify(customerRepository, times(1)).save(any(Customer.class));
    }

    @Test
    void testUpdateCustomer_NotFound() {
        when(customerRepository.findById(99L)).thenReturn(Optional.empty());

        Customer updated = customerService.updateCustomer(99L, customer1);

        assertNull(updated);
        verify(customerRepository, never()).save(any(Customer.class));
    }

    @Test
    void testDeleteCustomer() {
        doNothing().when(customerRepository).deleteById(1L);

        customerService.deleteCustomer(1L);

        verify(customerRepository, times(1)).deleteById(1L);
    }
}
