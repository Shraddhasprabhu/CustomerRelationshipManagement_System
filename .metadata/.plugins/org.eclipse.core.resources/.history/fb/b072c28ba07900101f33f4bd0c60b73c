package com.example.crm.controller;

import com.example.crm.entities.Sales;
import com.example.crm.service.SalesService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class SalesControllerTest {

    @Mock
    private SalesService salesService;

    @InjectMocks
    private SalesController salesController;

    private Sales sale1;
    private Sales sale2;
    private Sales sale3;

    @BeforeEach
    void setUp() {
        sale1 = new Sales();
        sale1.setId(1L);
        sale1.setProductName("CRM Software Subscription");
        sale1.setAmount(15000.00);
        sale1.setSaleDate(LocalDate.of(2024, 2, 5));
        sale1.setSoldBy("Parneet Singh");

        sale2 = new Sales();
        sale2.setId(2L);
        sale2.setProductName("Data Analytics Tool");
        sale2.setAmount(25000.50);
        sale2.setSaleDate(LocalDate.of(2024, 4, 18));
        sale2.setSoldBy("Sharika KR");

        sale3 = new Sales();
        sale3.setId(3L);
        sale3.setProductName("Inventory Management Suite");
        sale3.setAmount(32000.75);
        sale3.setSaleDate(LocalDate.of(2024, 6, 30));
        sale3.setSoldBy("Swizal Janice");
    }

    @Test
    void testAddSale() {
        when(salesService.addSale(sale1)).thenReturn(sale1);

        Sales result = salesController.addSale(sale1);

        assertNotNull(result);
        assertEquals("CRM Software Subscription", result.getProductName());
        assertEquals("Parneet Singh", result.getSoldBy());
    }

    @Test
    void testGetAllSales() {
        List<Sales> salesList = Arrays.asList(sale1, sale2, sale3);
        when(salesService.getAllSales()).thenReturn(salesList);

        List<Sales> result = salesController.getAllSales();

        assertNotNull(result);
        assertEquals(3, result.size());
        assertTrue(result.stream().anyMatch(s -> s.getSoldBy().equals("Sharika KR")));
    }

    @Test
    void testGetSaleById() {
        when(salesService.getSaleById(3L)).thenReturn(sale3);

        Sales result = salesController.getSaleById(3L);

        assertNotNull(result);
        assertEquals("Inventory Management Suite", result.getProductName());
        assertEquals("Swizal Janice", result.getSoldBy());
    }

    @Test
    void testUpdateSale() {
        when(salesService.updateSale(2L, sale2)).thenReturn(sale2);

        Sales result = salesController.updateSale(2L, sale2);

        assertNotNull(result);
        assertEquals("Data Analytics Tool", result.getProductName());
        assertEquals("Sharika KR", result.getSoldBy());
    }

    @Test
    void testDeleteSale() {
        salesController.deleteSale(1L);
        verify(salesService, times(1)).deleteSale(1L);
    }
}
