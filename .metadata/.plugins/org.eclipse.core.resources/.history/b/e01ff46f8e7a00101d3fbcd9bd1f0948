package com.example.crm.service;

import com.example.crm.dao.SalesRepository;
import com.example.crm.entities.Customer;
import com.example.crm.entities.Sales;
import org.junit.jupiter.api.*;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class SalesServiceTest {

    @Mock
    private SalesRepository salesRepository;

    @InjectMocks
    private SalesService salesService;

    private Sales sale1, sale2, sale3;
    private Customer customer1, customer2, customer3;

    @BeforeAll
    static void setupAll() {
        System.out.println("Before all SalesService tests...");
    }

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        System.out.println("Before each test...");

        customer1 = new Customer();
        customer1.setId(1L);
        customer1.setName("Ramesh Kumar");

        customer2 = new Customer();
        customer2.setId(2L);
        customer2.setName("Shraddha Patil");

        customer3 = new Customer();
        customer3.setId(3L);
        customer3.setName("Parneet Singh");

        sale1 = new Sales();
        sale1.setId(1L);
        sale1.setProductName("Dell Laptop");
        sale1.setAmount(new BigDecimal("55000.00"));
        sale1.setSaleDate(LocalDate.of(2024, 6, 15));
        sale1.setCustomer(customer1);

        sale2 = new Sales();
        sale2.setId(2L);
        sale2.setProductName("Samsung Galaxy S23");
        sale2.setAmount(new BigDecimal("70000.00"));
        sale2.setSaleDate(LocalDate.of(2024, 7, 5));
        sale2.setCustomer(customer2);

        sale3 = new Sales();
        sale3.setId(3L);
        sale3.setProductName("Sony Headphones");
        sale3.setAmount(new BigDecimal("15000.00"));
        sale3.setSaleDate(LocalDate.of(2024, 8, 1));
        sale3.setCustomer(customer3);
    }

    @AfterEach
    void tearDown() {
        System.out.println("After each test...");
    }

    @AfterAll
    static void tearDownAll() {
        System.out.println("After all SalesService tests...");
    }

    @Test
    void testAddSale() {
        when(salesRepository.save(sale1)).thenReturn(sale1);

        Sales saved = salesService.addSale(sale1);

        assertNotNull(saved);
        assertEquals("Dell Laptop", saved.getProductName());
        assertEquals(new BigDecimal("55000.00"), saved.getAmount());
        assertEquals("Ramesh Kumar", saved.getCustomer().getName());
    }

    @Test
    void testGetAllSales() {
        when(salesRepository.findAll()).thenReturn(Arrays.asList(sale1, sale2, sale3));

        List<Sales> sales = salesService.getAllSales();

        assertNotNull(sales);
        assertEquals(3, sales.size());
        assertTrue(sales.contains(sale2));
    }

    @Test
    void testGetSaleById_Found() {
        when(salesRepository.findById(2L)).thenReturn(Optional.of(sale2));

        Sales found = salesService.getSaleById(2L);

        assertNotNull(found);
        assertEquals("Samsung Galaxy S23", found.getProductName());
        assertEquals("Shraddha Patil", found.getCustomer().getName());
    }

    @Test
    void testGetSaleById_NotFound() {
        when(salesRepository.findById(99L)).thenReturn(Optional.empty());

        Sales notFound = salesService.getSaleById(99L);

        assertNull(notFound);
    }

    @Test
    void testUpdateSale_Found() {
        when(salesRepository.findById(1L)).thenReturn(Optional.of(sale1));
        when(salesRepository.save(any(Sales.class))).thenReturn(sale2);

        Sales updated = salesService.updateSale(1L, sale2);

        assertNotNull(updated);
        assertEquals("Samsung Galaxy S23", updated.getProductName());
        assertEquals(new BigDecimal("70000.00"), updated.getAmount());
    }

    @Test
    void testUpdateSale_NotFound() {
        when(salesRepository.findById(99L)).thenReturn(Optional.empty());

        Sales result = salesService.updateSale(99L, sale3);

        assertNull(result);
    }

    @Test
    void testDeleteSale() {
        salesService.deleteSale(1L);
        verify(salesRepository, times(1)).deleteById(1L);
    }
}
